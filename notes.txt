Some more notes

DONE Do block add command
DONE Block range command (though how to make that work with update data on pure file)

then...
Attributes of node (commands to add, listall, get)
Then...
Reverse search index (btree of words to url + version) (so rebuild for each update)
Search index stored in repo. So how to search all repos (mounted etc.?) Maybe you have to
   provide the urls of the mount points in search


Some more notes (added here at the top)

Fix console by putting in lock between notification updates and console updates
Do web front end next

Web API (kind of like api.github.com)
1. Most responses are in json form, except for getting content from a regular file (the file contents is returned
the mime type is set in the response).
2. The general form is:

[url]?cmd=[command on that url]&[any other parameters required for that command]

3. For uploading new data a POST form to a uri will also work (saves putting content in query parameters)
4. The default command is "get" so it can be omitted. So a simply uri corresponds to "return the contents of that file" or "return a
json document with information about this directory".
5. Other commands

stat = stat of uri (returned as json)
append = append data to that uri
tags = tags of that uri
gettag = retrieve the contents given a tag
blocks = retrieve a list of the block names for the tag
getrange = retrieve contents based on a range (start point, end point, each can be open) (with optional version)
delete = remove content
mount = create a mount point
link = create a link
diff = difference between two tags (TBD)




Some notes on what needs to be done for pmfs

(DONE for now) Append to File
Copy File (do this at the block level really - and between file systems potentially - it's really a series of append file calls for each block)
Create file of a given type (which can also be used to create a mountable file)
Handling traversal of mounted filesystems
(DONE) Upper side caching of nodes, channel to sync updates, non-removal of cached items that are not synced
Caching of data nodes (treat data nodes separately)
Series files (pass inode and key/value to underlying)
Tags (filesystem based tagname -> key/value (and path or inode?), with the ability to search, order, filter etc.)
    e.g.   Color -> Red -> [ /one/two, /three/four]
    Find paths where color = 'Red'
    Updating tags on deletion (so perhaps a reverse index needs to also be stored)
    Tag data saved as nodes of course
Versioning
    Create new version instead of just overwriting. Version links could be perhaps tags pointing to inodes of the original file node
     instead of paths
    E.g.    Version -> /one/two/three [ 1 -> 12223, 2 -> 22211, 3 -> 23324 ]
Functions to page through a file or directory listing (byte point to byte point, series start to end, etc.)
MongoDB implementation
Cassandra implementation
Postgresql implementation
(INPROGRESS) Client side shell https://github.com/nsf/termbox-go
Thrift api + client side application (using that console based library?) (like a shell prompt with some screen stuff going on)
Web front end (browse structure, search using tags, browse versions, update data, append data, delete data, create mount points, archive versions)
Symbolic links (hard and soft)
Channel on shell to show output from filesystem execution (messages basically)


Sample commands through the "shell"

cd /alan   ; do a stat on the folder
ls         ; dir listing
cat /alan/1  ; print out contents
append /alan/1 content  ; add to file
append 1 content  ; add to file, using the current directory
rm 1    ; delete a file
copy 1 2  ; copy one file to another
stat 1  ; print out information on a file
mount /fred/mongo mongodb:/127.0.0.1:1222/db collectionName
append /fred/mongo/one Some content ; Would now be writing to mongodb
cat /fred/mongo ; Would write out some information about the mount point
rm /fred/mongo ; Would remove that mount point (maybe not removing the data?)

(DONE) delete command in shell
When you create a file (add a file) you need to specify the mime type (it defaults to text/plain). The mime type
is stored in the File node.
A directory node can be a mount type. If we traverse through that we pass on the remaining path to the cached filesystem
associated with that node id, if the cached fs does not exist we load it from the contents of the extended Block node attributes
of the directory node (which should contain some structure that was passed during an "add mount" call)

Some bugs

(DONE) appending data goes into continuation continually once it starts
